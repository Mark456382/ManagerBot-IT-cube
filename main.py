import time

import User

from buttons import *
from config import TOKEN
import aiogram.utils.markdown as md
from aiogram.dispatcher import FSMContext
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from User import *

bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def welcome(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.first_name}. " +
                        "–Ø –ë–æ—Ç –ú–µ–Ω–µ–¥–∂–µ—Ä, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ç–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏. " +
                        "–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞?", reply_markup=keyboard)


@dp.message_handler(Text('–ë–∏–∑–Ω–µ—Å'))
async def busness(message: types.Message):
    await message.reply('–ö–µ–º —Ç—ã —è–≤–ª—è–µ—à—å—Å—è?', reply_markup=keyboard_1)


@dp.message_handler(Text('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)'))
async def worker(message: types.Message):
    deadline = 0
    task = 0
    if task:
        await User.employer.set()
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è')
    else:
        await message.answer(f'–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –¥–æ {deadline}: {task}')


@dp.message_handler(Text("–ú–µ–Ω–µ–¥–∂–µ—Ä (—É–ø—Ä–∞–≤–ª—è—é—â–∏–π)"))
async def lider_name_input(message: types.Message):
    await User.worker.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û')


@dp.message_handler(state=User.employer)
async def state_boss(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['employer'] = message.text
    await state.finish()
    await message.answer(md.bold(data['employer']))


@dp.message_handler(state=User.worker)
async def lider_name_save(message: types.Message, state=FSMContext):
    in_db = True
    connect = True
    async with state.proxy() as data:
        data['worker'] = message.text
    await state.finish()

    await message.answer('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ...')
    time.sleep(3)
    if in_db and connect:
        await message.answer(md.bold(data['worker']))
    elif in_db:
        await message.answer('–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –µ—Å—Ç—å –≤ –±–∞–∑–µ, –Ω–æ –æ–Ω –≤–∞—Å –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª. ' +
                             '–°–≤—è–∂–∏—Ç–µ—Å—å –≤ –≤–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–∞—Å –¥–æ–±–∞–≤–∏—Ç—å')
    else:
        await message.answer('–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–∞—Ö')


@dp.message_handler(Text('–ü–æ–º–æ—â—å'))
async def helper(message: types.Message):
    await message.answer('–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–æ—Ç—É\n.....')


@dp.message_handler(Text('–°–µ–º—å—è'))
async def family(message: types.Message):
    await User.family.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û, –∏ –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n–ù–∏–∫–æ–ª–∞–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á - –°—Ç–∞—Ä—à–∏–π —Å—ã–Ω")


@dp.message_handler(state=User.family)
async def state_family(message: types.Message, state=FSMContext):
    name = message.text.split(sep=" - ", maxsplit=1)
    async with state.proxy() as data:
        data['family'] = message.text
    await state.finish()
    await message.answer(md.bold(data['family']))
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –≤ —Å–≤–æ—é —Å–µ–º—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–ª–∏ –≤—Å—É–ø–∏—Ç–∏ —É–∂–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é!", reply_markup=keyboard_fam)


@dp.message_handler(Text('–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'))
# –ü—Ä–∏–¥—É–º–∞—Ç—å —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
async def add_peoples(message: types.message):
    ...

@dp.message_handler(Text("–ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è"))
# –ü—Ä–∏–¥—É–º–∞—Ç—å —Å–ø–æ—Å–æ–± –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —á–µ—Ä–µ–∑ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–ª–∏ –Ω–µ –∑–Ω–∞—é –∫–∞–∫...
async def join_family(message: types.Message):
    ...


@dp.message_handler(Text('–î–ª—è —Å–µ–±—è'))
async def for_self(message: types.Message):
    await User.self.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û")


@dp.message_handler(state=User.self)
async def save_self(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['self'] = message.text
    await state.finish()
    await message.answer(md.bold(data['self']))


@dp.message_handler(commands="set task")
# –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–ø–æ—Å–æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Ö –≤ –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
async def set_task(message: types.Message):
    await message.answer("–î–ª—è –∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏–µ?", reply_markup=keyboard_task)



@dp.message_handler(content_types=['any'])
async def nonetype_message(message: types.Message):
    await message.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å üòÖ')


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
