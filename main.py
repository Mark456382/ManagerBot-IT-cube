from buttons import *
from config import TOKEN
import aiogram.utils.markdown as md
from aiogram.dispatcher import FSMContext
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup


bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class User(StatesGroup):
    value = State()


@dp.message_handler(commands=['start'])
async def welcome(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.first_name}. " +
                         "–Ø –ë–æ—Ç –ú–µ–Ω–µ–¥–∂–µ—Ä, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ç–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏. " +
                         "–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞?", reply_markup=keyboard)


@dp.message_handler(Text('–ë–∏–∑–Ω–µ—Å'))
async def busness(message: types.Message):
    await message.reply('–ö–µ–º —Ç—ã —è–≤–ª—è–µ—à—å—Å—è?', reply_markup=keyboard_1)


@dp.message_handler(Text('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)'))
async def helper(message: types.Message):
    deadline = 1
    task = 1
    if task:
        await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç')
    else:
        await message.answer(f'–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –¥–æ {deadline}: {task}')


@dp.message_handler(Text("–ú–µ–Ω–µ–¥–∂–µ—Ä (—É–ø—Ä–∞–≤–ª—è—é—â–∏–π)"))
async def lider_name_input(message: types.Message):
    await User.value.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û')


@dp.message_handler(state=User.value)
async def lider_name_save(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['value'] = message.text
    await state.finish()

    await message.answer(md.bold(data['value']))


@dp.message_handler(Text('–°–µ–º—å—è'))
async def family(message: types.Message):
    ...


@dp.message_handler(Text('–î–ª—è —Å–µ–±—è'))
async def for_self(message: types.Message):
    ...


@dp.message_handler(content_types=['any'])
async def nonetype_message(message: types.Message):
    await message.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å üòÖ')


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
